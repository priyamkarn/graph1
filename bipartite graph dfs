bool dfs(int node, int c, vector<int> adj[], vector<int>& color, vector<bool>& visited) {
    visited[node] = true;
    color[node] = c;
    for (int i = 0; i < adj[node].size(); i++) {
        int neighbor = adj[node][i];
        if (!visited[neighbor]) {
            if (!dfs(neighbor, 1-c, adj, color, visited)) {
                return false;
            }
        } else if (color[neighbor] == color[node]) {
            return false;
        }
    }
    return true;
}

bool isBipartite(int V, vector<int> adj[]) {
    vector<int> color(V, -1); // color of each node
    vector<bool> visited(V, false); // visited array
    bool is_bipartite = true;
    for (int i = 0; i < V; i++) {
        if (!visited[i]) {
            if (!dfs(i, 0, adj, color, visited)) {
                is_bipartite = false;
                break;
            }
        }
    }
    return is_bipartite;
}
